#!/usr/bin/python
#
# Copyright 2013 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Create a searchable PDF from a pile of HOCR + JPEG. Tested with
# Tesseract.

import sys
import glob
import os.path
import cStringIO
import base64
import zlib
import re

from PIL import Image
from reportlab.pdfgen.canvas import Canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from xml.etree.ElementTree import ElementTree, ParseError

def get_image(image):
    im = Image.open(image)
    img_w, img_h = im.size
    try:
        img_dpi = im.info['dpi'][0]
    except KeyError:
        print 'Cant detect dpi in file %s' % image
        raise
        img_dpi = None
    #img_dpi = 180
    #print img_dpi
    return (im, img_w, img_h, img_dpi)

# pdf_width, pdf_height and pdf_dpi specify the dimensions that you want the
# pdf to be output as
def export_pdf(outfile, title, img_dir, hocr_dir, pdf_width, pdf_height, pdf_dpi, front, back):
    """Create a searchable PDF from a pile of HOCR + JPEG"""
    load_invisible_font()
    pdf = Canvas(outfile, pageCompression=1)

    # Figure out the pdf page size required and set it the same for all pages (can do this on a per-page basis if you want)
    page_width = pdf_width * 72 / pdf_dpi
    page_height = pdf_height * 72 / pdf_dpi
    pdf.setPageSize((page_width, page_height))

    #print pdf.getAvailableFonts()
    #pdf.setCreator('hocr-tools')
    if title:
        pdf.setTitle(title)

    def add_image(image, hocr_file = None):
        (im, img_w, img_h, img_dpi) = get_image(image)

        img_pdf_width = img_w * 72 / img_dpi
        img_pdf_height = img_h * 72 / img_dpi

        # Draw image in the center of the page
        x_off = (page_width - img_pdf_width) / 2
        y_off = (page_height - img_pdf_height) / 2
        pdf.drawImage(
            image,
            x_off, y_off,
            width=img_pdf_width, height=img_pdf_height
        )

        # Add in hocr text details if exists
        if hocr_file and os.path.exists(hocr_file):
          add_text_layer(pdf, hocr_file, img_pdf_height, img_h, img_dpi, x_off, y_off)

    if len(front) and os.path.exists(front):
        add_image(front)

    images = sorted(glob.glob(os.path.join(img_dir, '*.jpg')))
    num_re = re.compile(r'(\d+)\.jpg$')
    prev_num = None
    for image in images:
        # Add blank pages
        num = int(num_re.search(image).group(1))
        if prev_num is not None:
            for i in range(num - prev_num - 1):
                pdf.showPage()
        prev_num = num

        hocr_file = os.path.basename(image);
        hocr_file = hocr_dir + os.path.splitext(hocr_file)[0] + '.hocr'

        add_image(image, hocr_file)

        pdf.showPage()

    if len(back) and os.path.exists(back):
        add_image(back)

    pdf.save()

def add_text_layer(pdf, hocr_file, pdf_height, image_height, image_dpi, x_off, y_off):
    """Draw an invisible text layer for OCR data"""
    p1 = re.compile('bbox((\s+\d+){4})')
    p2 = re.compile('baseline((\s+[\d\.\-]+){2})')
    hocr = ElementTree()
    hocr.parse(hocr_file)

    # Calculate HOCR file's dpi by comparing image height recorded here to
    # height of input image...
    page = hocr.find(".//*[@class='ocr_page']")
    if page is not None:
        input_img_h = p1.search(page.attrib['title']).group(1).split()[3]
        hocr_dpi = float(input_img_h)/float(image_height) * image_dpi
    else:
        raise "No input image height saved in hocr"

    for line in hocr.findall(".//{http://www.w3.org/1999/xhtml}span"):
        if line.attrib['class'] != 'ocr_line':
            continue
        linebox = p1.search(line.attrib['title']).group(1).split()
        try:
            baseline = p2.search(line.attrib['title']).group(1).split()
        except AttributeError:
            baseline = [ 0, 0 ]
        linebox = [float(i) for i in linebox]
        baseline = [float(i) for i in baseline]
        for word in line:
            rawtext = ''

            if word.attrib['class'] != 'ocrx_word':
                continue
            if word.text is not None:
                rawtext = word.text.strip()
            else:
                try:
                    innerword = word[0]
                    if innerword.text is not None:
                        rawtext = innerword.text.strip()
                except:
                    continue

            if rawtext == '':
                continue

            box = p1.search(word.attrib['title']).group(1).split()
            box = [float(i) for i in box]
            box_height = linebox[3] - linebox[1];
            b = polyval(baseline, (box[0] + box[2]) / 2 - linebox[0]) + linebox[3]

            font_name = 'invisible'
            #font_name = 'Times-Roman'

            # 0.7 is scaling factor font to line-size
            font_size = int( box_height / hocr_dpi * 72.0 * 0.7 )

            font_width = pdf.stringWidth(rawtext, font_name, font_size)
            if font_width <= 0:
                continue
            text = pdf.beginText()
            text.setTextRenderMode(3)    # double invisible
            text.setFont(font_name, font_size)
            text.setTextOrigin(box[0] * 72 / hocr_dpi + x_off, pdf_height - b * 72 / hocr_dpi + y_off)
            box_width = (box[2] - box[0]) * 72 / hocr_dpi
            text.setHorizScale(100.0 * box_width / font_width)
            text.textLine(rawtext)
            pdf.drawText(text)

def polyval(poly, x):
    return x * poly[0] + poly[1]

def run():
    if len(sys.argv) < 10:
        print "Usage: %s <title> <width> <height> <dpi> <img_dir> <hocr_dir> <output> [front cover] [back cover]\n" % os.path.basename(sys.argv[0])
        sys.exit("usage error")

    (prog_name, title, pdf_width, pdf_height, pdf_dpi, img_dir, hocr_dir, output, front, back) = sys.argv;

    export_pdf(output, title, img_dir, hocr_dir, int(pdf_width), int(pdf_height), int(pdf_dpi), front, back)

# Glyphless variation of vedaal's invisible font retrieved from
# http://www.angelfire.com/pr/pgpf/if.html, which says:
# 'Invisible font' is unrestricted freeware. Enjoy, Improve, Distribute freely
def load_invisible_font():
    font = """
eJzdlk1sG0UUx/+zs3btNEmrUKpCPxikSqRS4jpfFURUagmkEQQoiRXgAl07Y3vL2mvt2ml8APXG
hQPiUEGEVDhWVHyIC1REPSAhBOWA+BCgSoULUqsKcWhVBKjhzfPU+VCi3Flrdn7vzZv33ryZ3TUE
gC6chsTx8fHck1ONd98D0jnS7jn26GPjyMIleZhk9fT0wcHFl1/9GRDPkTxTqHg1dMkzJH9CbbTk
xbWlJfKEdB+Np0pBswi+nH/Nvay92VtfJp4nvEztUJkUHXsdksUOkveXK/X5FNuLD838ICx4dv4N
I1e8+ZqbxwCNP2jyqXoV/fmhy+WW/2SqFsb1pX68SfEpZ/TCrI3aHzcP//jitodvYmvL+6Xcr5mV
vb1ScCzRnPRPfz+LsRSWNasuwRrZlh1sx0E8AriddyzEDfE6EkglFhJDJO5u9fJbFJ0etEMB78D5
4Djm/7kjT0wqhSNURyS+u/2MGJKRu+0ExNkrt1pJti9p2x6b3TBJgmUXuzgnDmI8UWMbkVxeinCw
Mo311/l/v3rF7+01D+OkZYE0PrbsYAu+sSyxU0jLLtIiYzmBrFiwnCT9FcsdOOK8ZHbFleSn0znP
nDCnxbnAnGT9JeYtrP+FOcV8nTlNnsoc3bBAD85adtCNRcsSffjBsoseca/lBE7Q09LiJOm/ttyB
0+IqcwfncJt5q4krO5k7jV7uY+5m7mPebuLKUea7iHvk48w72OYF5rvZT8C8k/WvMN/Dc19j3s02
bzPvZZv3me9j/ox5P9t/xdzPzPVJcc7yGnPL/1+GO1lPVTXM+VNWOTRRg0YRHgrUK5yj1kvaEA1E
xAWiCtl4qJL2ADKkG6Q3XxYjzEcR0E9hCj5KtBd1xCxp6jV5mKP7LJBr1nTRK2h1TvU2w0akCmGl
5lWbBzJqMJsdyaijQaCm/FK5HqspHetoTtMsn4LO0T2mlqcwmlTVOT/28wGhCVKiNANKLiJRlxqB
F603axQznIzRhDSq6EWZ4UUs+xud0VHsh1U1kMlmNwu9kTuFaRqpURU0VS3PVmZ0iE7gct0MG/8+
2fmUvKlfRLYmisd1w8pk1LSu1XUlryM1MNTH9epTftWv+16gIh1oL9abJZyjrfF5a4qccp3oFAcz
Wxxx4DpvlaKKxuytRDzeth5rW4W8qBFesvEX8RFRmLBHoB+TpCmRVCCb1gFCruzHqhhW6+qUF6tC
pL26nlWN2K+W1LhRjxlVGKmRTFYVo7CiJug09E+GJb+QocMCPMWBK1wvEOfRFF2U0klK8CppqqvG
pylRc2Zn+XDQWZIL8iO5KC9S+1RekOex1uOyZGR/w/Hf1lhzqVfFsxE39B/ws7Rm3N3nDrhPuMfc
w3R/aE28KsfY2J+RPNp+j+KaOoCey4h+Dd48b9O5G0v2K7j0AM6s+5WQ/E0wVoK+pA6/3bup7bJf
CMGjwvxTsr74/f/F95m3TH9x8o0/TU//N+7/D/ScVcA=
"""
    ttf = cStringIO.StringIO(zlib.decompress(base64.decodestring(font)))
    pdfmetrics.registerFont(TTFont('invisible', ttf))

if __name__ == "__main__":
    run()
